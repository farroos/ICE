//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimulationEngine.MarketWatchService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MarketWatchService.IMarketWatch", CallbackContract=typeof(SimulationEngine.MarketWatchService.IMarketWatchCallback))]
    public interface IMarketWatch {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketWatch/Subscribe", ReplyAction="http://tempuri.org/IMarketWatch/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketWatch/Subscribe", ReplyAction="http://tempuri.org/IMarketWatch/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMarketWatch/PublishPriceChange")]
        void PublishPriceChange(string symbol, decimal newPrice);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMarketWatch/PublishPriceChange")]
        System.Threading.Tasks.Task PublishPriceChangeAsync(string symbol, decimal newPrice);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMarketWatchCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMarketWatch/NotifyPriceChange")]
        void NotifyPriceChange(string symbol, decimal price);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMarketWatchChannel : SimulationEngine.MarketWatchService.IMarketWatch, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarketWatchClient : System.ServiceModel.DuplexClientBase<SimulationEngine.MarketWatchService.IMarketWatch>, SimulationEngine.MarketWatchService.IMarketWatch {
        
        public MarketWatchClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MarketWatchClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MarketWatchClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MarketWatchClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MarketWatchClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void PublishPriceChange(string symbol, decimal newPrice) {
            base.Channel.PublishPriceChange(symbol, newPrice);
        }
        
        public System.Threading.Tasks.Task PublishPriceChangeAsync(string symbol, decimal newPrice) {
            return base.Channel.PublishPriceChangeAsync(symbol, newPrice);
        }
    }
}
